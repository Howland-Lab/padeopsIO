&INPUT
inputdir                      = "{{ dirname }}"   ! Directory for any input files
outputdir                     = "{{ dirname }}"   ! Directory for all output files
nx                            = {{ "%d"|format(nx|int)}}          ! Number of points in X
ny                            = {{ "%d"|format(ny|int)}}          ! Number of points in Y
nz                            = {{ "%d"|format(nz|int)}}          ! Number of points in Z
tstop                         = {{ "%.1f"|format(tstop|float)}}d0       ! Physical time to stop the simulation
CFL                           = 1.4D0        ! CFL criterion for calculating the time step (Set to negative to disable)
dt                            = 0.001D0      ! Fixed time step value (only used if CFL is set to negative)
prow                          = 0            ! Number of rows in 2D processor decomposition (set 0 for auto-tuning)
pcol                          = 0            ! Number of rows in 2D processor decomposition (set 0 for auto-tuning)
useRestartFile                = .FALSE.      ! Set to false if it's a fresh simulation 
restartFile_TID               = 0            ! TimeID of the restart file being used
restartFile_RID               = 1            ! RunID of the restart file being used
/
/
&NUMERICS
TimeSteppingScheme            = 2            ! 0: Adams-Bashforth, 1: TVD-RK3 (use this)
AdvectionTerm                 = 1            ! 0: Rotational Form, 1: Skew-Symmetric Form (use this for Compact Scheme)
NumericalSchemeVert           = 1            ! 0: Second order FD, 1: Sixth order Compact Difference (CD06), 2: Fourier
ComputeStokesPressure         = .TRUE.       ! This would be FALSE only is very special circumstances.  
useDealiasFilterVert          = .FALSE.      ! Dealiasing filter used in vertical direction
t_DivergenceCheck             = 50           ! Check divergence every $ timesteps. Reproject if needed.
dealiasFact                   = 0.6667d0
/
/
&IO
RunID                         = {{ runid }}          ! Run Label (All output files will be tagged with this nubber)
t_restartDump                 = 1000         ! Restart File Dumping Frequency  (# of timesteps)
t_dataDump                    = 100          ! Data dumping frequency (# of timesteps)
ioType                        = 0            ! 0: Fortran Binaries, 1: .vtk files
dumpPlanes                    = .FALSE.      ! Dump plane visualations. Select planes in initialize.F90
t_planeDump                   = 100          ! Plane dumping frequency (# of timesteps)
t_start_planeDump             = 1            ! When do you want to start dumping planes?
t_stop_planeDump              = 5000         ! When do you want to stop dumping planes?
/
/
&STATS
tid_StatsDump                 = 20000        ! Dumping Frequency for Statistics file (# of time steps)
tid_compStats                 = 10           ! Frequency of Computing Statistics
tSimStartStats                = 20.d0        ! Simulation time for starting stats calculations 
normStatsByUstar              = .FALSE.      ! Normalize Statistics by ustar at each instant
computeSpectra                = .FALSE.      ! Compute and time average x - spectra on the run
timeAvgFullFields             = .FALSE.      ! Time average and store fields on the run
/
/
&OS_INTERACTIONS
useSystemInteractions         = .TRUE.       ! Do you wish to interact with the program while its running
tSystemInteractions           = 10           ! Check for interactions commands after these many time steps
controlDir                    = "null"       ! Check in this directory for command files (NULL = Check in output directory)
/
/
&PHYSICS
isInviscid                    = .TRUE.       ! Is this an inviscid simulation?
useCoriolis                   = .TRUE.       ! Activate the coriolis term? 
useExtraForcing               = .FALSE.      ! Is an extra forcing term being used? (non-Geostrophic forcing only)
useGeostrophicForcing         = .TRUE.       ! This is true if forcing is provided using the coriolis term  
isStratified                  = .FALSE.      ! Use Stratification / active scalar in momentum
Pr                            = 0.6D0        ! Turbulent Prandtl Number; used when 
Ro                            = {{ "%0.4e"|format(Ro|float) }}  ! Rossby Number used when Coriolis is ON
Re                            = 1.D10        ! Reynolds Number; used when isInvisid is FALSE
Fr                            = 1.D10        ! Froude number; used when isStratified is TRUE
G_geostrophic                 = 1.D0         ! Geostrophic wind speed 
useConstantG                  = .{{ useconstantG }}.      ! Use G(z) if FALSE
G_alpha                       = 0.D0         ! Geostrophic wind angle (degrees, from +x axis)
latitude                      = {{ "%.4f"|format(lat|float) }}d0        ! Latitude 
dPfdx                         = 0.D0         ! Additional Acceleration in X; used if useExtraForcing is ON
dPfdy                         = 0.D0         ! Additional Acceleration in Y; used if useExtraForcing is ON
dPfdz                         = 0.D0         ! Additional Acceleration in Z; used if useExtraForcing is ON
useSGS                        = .true.       ! Do you want to use the SGS model?  
useHITforcing                 = .false.      ! Use additional HIT forcing? 
frameAngle                    = 0.d0
useScalars                    = .false.
/
/
&PRESSURE_CALC
fastCalcPressure              = .TRUE.       ! Compute and store pressure at every time step using the faster algorithm?
storePressure                 = .TRUE.       ! Would you like to compute and store pressure?
P_dumpFreq                    = 100          ! How often (timesteps) do you want to dump pressure?
P_compFreq                    = 10           ! How often (timesteps) do you want to compute pressure? 
/
/
&BCs
useFringe                     = .TRUE.       ! Add fringe region to restore periodicity in x
PeriodicInZ                   = .FALSE.      ! Is the problem periodic in Z?
botWall                       = 2            ! no_slip = 1, slip = 2
topWall                       = 2            ! no_slip = 1, slip = 2
useSpongeLayer                = .FALSE.      ! Use a sponge layer at the top 
zstSponge                     = 0.8d0        ! Height above which the sponge layer is active
SpongeTscale                  = 50.d0        ! e-folding time to dt ratio (somewhere between 10 - 50) 
/
/
&SGS_MODEL
SGSModelID                    = 1            ! 0: smagorinsky, 1: sigma, 2: AMD 
DynamicProcedureType          = 0            ! 0: no dynamic procedure, 1: Standard Dynamic Procedure, 2: Global Dynamic Procedure
Csgs                          = 0.800d0        ! Asymptotic model constant (wall damping function)
explicitCalcEdgeEddyViscosity = .true.       ! Explicitely compute eddy viscosity at edges? or interpolate? 
/
/
&WINDTURBINES
useWindTurbines       = .{{ usewindturbines }}.
num_turbines          = 1
ADM                   = .TRUE.
turbInfoDir           = "{{ turbine_dir }}"
ADM_Type              = 5
useDynamicYaw         = .FALSE.
/
/
&FRINGE
Fringe_xst                    = {{ "%0.4f"|format(fringe_xst|float) }}d0       ! Fraction of Lx, start location
Fringe_xen                    = {{ "%0.4f"|format(fringe_xen|float) }}d0       ! Fraction of Lx, end location
Fringe_delta_st_x             = {{ "%0.4f"|format(fringe_delta_xst|float) }}d0       ! Fraction of Lx, start ramp length
Fringe_delta_en_x             = {{ "%0.4f"|format(fringe_delta_xen|float) }}d0       ! Fraction of Lx, end ramp length
LambdaFact                    = {{ "%0.4f"|format(lambdafact|float) }}d0       ! fringe strength (order 1)
/
/
&KSPREPROCESS
PreprocessForKS               = .FALSE.        ! Do you want to generate preprocessing files for KS? 
KSoutputDir                   = "SomeLocation" ! Directory where KS files are dumped.
KSRunID                       = 99             ! RunID tag for KS files
t_dumpKSprep                  = 10             ! Dumping Frequency for KS files
/
/
&BUDGET_TIME_AVG
do_budgets            = .{{ do_budgets }}.                 ! Perform budget calculations? 
budgetType            = 1                      ! See type descriptions in budget_time_avg.F90
budgets_dir           = "{{ dirname }}"   ! Write in default output directory
tidx_compute          = 1                      ! How often should budgets be computed?  
tidx_dump             = 1000                   ! How often should budget files be written to disk? 
tidx_budget_start     = -1                     ! Start budget computation from this timestep onward
time_budget_start     = {{ "%0.1f"|format(time_budget_start|float) }}d0
restart_budgets       = .FALSE.                ! use existing budget file to restart budget calculations? 
restart_rid           = 1                      ! Restart budget file run index
restart_tid           = 35000                  ! Restart budget file time index
restart_counter       = 5544                   ! Restart budget file counter 
/
/
&AD_CoriolisINPUT
Lx                            = {{ "%0.4f"|format(Lx|float) }}d0         ! Domain Length (appropriate dimensions/non-dimensionalized)
Ly                            = {{ "%0.4f"|format(Ly|float) }}d0         ! Domain Width  (appropriate dimensions/non-dimensionalized)
Lz                            = {{ "%0.4f"|format(Lz|float) }}d0         ! Domain Height (appropriate dimensions/non-dimensionalized)
uInflow                       = {{ "%0.4f"|format(uinflow|float) }}d0           ! Shear strength dU/dz = uInflow/InflowProfileAmplit 
vInflow                       = {{ "%0.4f"|format(vinflow|float) }}d0           ! Veer strength dalpha/dz = vInflow/InflowProfileAmplit (rad/L)
InflowProfileAmplit           = {{ "%0.4f"|format(inflowprofileamplit|float) }}d0           ! Controls amplitude in Type 1, 2
InflowProfileThick            = {{ "%0.4f"|format(inflowthick|float) }}d0           ! with uInflow (vInflow) controls strength of shear (veer) 
InflowProfileType             = {{ "%d"|format(inflowprofiletype|int) }}              ! Inflow profile; 0: uniform, 1: MFH veer, 2: MFH shear + veer, 5: new shear 6: new veer, 7: shear + veer
yaw                           = {{ "%0.4f"|format(yaw_inflow|float) }}d0              ! Yaw angle (IN DEGREES)
zmid                          = {{ "%0.4f"|format(zmid|float) }}d0              ! Midpoint location, if negative defaults to Lz/2
/
